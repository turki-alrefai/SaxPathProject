/*
 * This file was automatically generated by EvoSuite
 */

package com.werken.saxpath;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.werken.saxpath.XPathReader;
import org.junit.BeforeClass;
import org.saxpath.SAXPathException;
import org.saxpath.XPathSyntaxException;

@RunWith(EvoSuiteRunner.class)
public class XPathReaderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("m[]pky{p");
      try {
        xPathReader0.andExpr();
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected ']'
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.parse(".5Tj0+3>");
  }

  @Test
  public void test2()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.parse("'{40;'zNJdsutC''3$");
  }

  @Test
  public void test3()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("rb:70");
      try {
        xPathReader0.axisSpecifier();
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Expected valid axis name instead of [rb]
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse("2>8<+_r");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected '+'
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse("1/osr>S3e|HX6]");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected ']'
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("(3m1[]} ydk");
      xPathReader0.andExpr();
      assertEquals(0, xPathReader0.axisSpecifier());
  }

  @Test
  public void test7()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse("<RKMV-l/zdEF};l?");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected '<'
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse("f(@L)|>u");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected '>'
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.parse("O/Vg=/?b\"Y");
  }

  @Test
  public void test10()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse("./");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Expected one of '.', '..', '@', '*', <QName>
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse(":B^_,(}a4y0");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected ':'
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.parse("*#Gvx ?.icbxL");
  }

  @Test
  public void test13()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse("=re0Bof+|2s.#4");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected '='
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("JQ/@DwZ!<>u`_ZEffJTp");
      xPathReader0.andExpr();
      try {
        xPathReader0.arguments();
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected '!'
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("g$'~n{}o29");
      xPathReader0.orExpr();
      // Undeclared exception!
      try {
        xPathReader0.arguments();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      try {
        xPathReader0.parse("Og=/x.b+\"Y");
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected ''
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("rb:70");
      xPathReader0.andExpr();
      xPathReader0.additiveExpr();
      xPathReader0.filterExpr();
      assertEquals(0, xPathReader0.axisSpecifier());
  }

  @Test
  public void test18()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("rb:70");
      // Undeclared exception!
      try {
        xPathReader0.functionCall();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.parse("starAdditiveExpr()");
  }

  @Test
  public void test20()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("rb:70");
      // Undeclared exception!
      try {
        xPathReader0.variableReference();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("(3m1[]} ydk");
      try {
        xPathReader0.locationPath(false);
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Unexpected '('
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("(3m1[]} ydk");
      xPathReader0.absoluteLocationPath();
      assertEquals(0, xPathReader0.axisSpecifier());
  }

  @Test
  public void test23()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("rb:70");
      xPathReader0.andExpr();
      xPathReader0.additiveExpr();
      xPathReader0.relativeLocationPath();
      assertEquals(0, xPathReader0.axisSpecifier());
  }

  @Test
  public void test24()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("(3m1[]} ydk");
      xPathReader0.step(false);
      assertEquals(0, xPathReader0.axisSpecifier());
  }

  @Test
  public void test25()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("(3m1[]} ydk");
      int int0 = xPathReader0.axisSpecifier();
      assertEquals(0, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("child");
      assertEquals(1, xPathReader0.axisSpecifier());
      
      int int0 = xPathReader0.axisSpecifier();
      assertEquals(0, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("endMultiplicativeExpr(");
      try {
        xPathReader0.locationPath(false);
        fail("Expecting exception: XPathSyntaxException");
      } catch(XPathSyntaxException e) {
        /*
         * Expected node-type
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("processing-instruction");
      xPathReader0.nodeTypeTest(1815);
      assertEquals(0, xPathReader0.axisSpecifier());
  }

  @Test
  public void test29()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.setUpParse("(3m1[]} ydk");
      xPathReader0.abbrStep();
      assertEquals(0, xPathReader0.axisSpecifier());
  }

  @Test
  public void test30()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.parse("AlODHz*J\"PW;a");
  }

  @Test
  public void test31()  throws Throwable  {
      XPathReader xPathReader0 = new XPathReader();
      xPathReader0.parse("y(-QTu");
  }
}
